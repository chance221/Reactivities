{"version":3,"sources":["resources/Images/css.png","resources/Images/js.png","resources/Images/html.png","resources/Images/c.png","features/nav/NavBar.tsx","features/snips/dashboard/SnipList.tsx","features/details/SnipsDetails.tsx","features/form/SnipForm.tsx","features/snips/dashboard/SnipsDashboard.tsx","app/api/agent.ts","app/layout/Loading.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","openCreateForm","className","href","Header","as","icon","Icon","name","Subheader","onClick","SnipList","snips","selectSnip","deleteSnip","submitting","target","Segment","map","snip","key","id","title","language","description","code","Button","floated","content","color","e","loading","SnipsDetails","snipLang","setEditMode","setSelectedSnip","src","toLowerCase","js","c","html","css","alt","category","Group","widths","basic","SnipForm","initialFormState","createSnip","editSnip","useState","setSnip","handleInputChange","event","currentTarget","value","clearing","Form","onSubmit","length","newSnip","uuid","Input","onChange","placeholder","TextArea","rows","positive","type","SnipsDashboard","selectedSnip","editMode","List","axios","defaults","baseURL","process","responseBody","response","data","request","url","get","then","body","post","put","delete","list","details","create","update","Loading","Dimmer","active","inverted","Loader","size","App","setSnips","setLoading","setSubmitting","setTarget","useEffect","agent","Container","filter","s","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45c924a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/css.0dfe8c06.png\";","module.exports = __webpack_public_path__ + \"static/media/js.e9a85b5a.png\";","module.exports = __webpack_public_path__ + \"static/media/html.01bf7832.png\";","module.exports = __webpack_public_path__ + \"static/media/c.7c4e2fc2.png\";","import React from 'react'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\nimport './css/NavBar.css'\r\n\r\ninterface IProps {\r\n  openCreateForm: () => void\r\n}\r\n\r\nexport const NavBar: React.FC<IProps> = ({openCreateForm}) => {\r\n  return (\r\n    <div className=\"center fixed\">\r\n        <div className=\"center\">\r\n        \r\n        </div>\r\n      <div className=\"ui teal three item inverted menu left\">\r\n        <a className=\"item\" href=\"#top\">\r\n          <Header as='h4' icon className=\"center\">\r\n            <Icon name ='cut'/>\r\n              Snippix\r\n            <Header.Subheader>\r\n              Save Time. Save Your Code.\r\n            </Header.Subheader>\r\n          </Header>\r\n        </a>\r\n        <a className=\"item \" href=\"#top\">\r\n          Snippets\r\n        </a>\r\n        <button onClick={openCreateForm} className=\"item dif\">Create Snip</button>\r\n          \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { SyntheticEvent } from 'react'\r\nimport { Button, Segment } from 'semantic-ui-react'\r\nimport { ISnip } from '../../../app/models/snip'\r\n\r\ninterface IProps{\r\n  snips:ISnip[];\r\n  selectSnip: (id:string) => void;\r\n  deleteSnip: (e:SyntheticEvent<HTMLButtonElement>, id: string) => void;\r\n  submitting: boolean;\r\n  target: string;\r\n}\r\n\r\n\r\n\r\nexport const SnipList: React.FC<IProps> = ({snips, selectSnip, deleteSnip, submitting, target}) => {\r\n  return (\r\n    \r\n    <Segment className=\"clearing\">\r\n    <div className=\"ui items\">\r\n    {snips.map(snip =>\r\n      <div key={snip.id} className=\"item\">\r\n        <div className=\"content\">\r\n          <a className=\"header\" href=\"#top\">{snip.title}</a>\r\n          <div className=\"meta\">\r\n            <span>Language: {snip.language}</span>\r\n          </div>\r\n          <div className=\"meta\">\r\n            <span>Description</span>\r\n          </div>\r\n          <div className=\"description\">\r\n            <p>{snip.description}</p>\r\n          </div>\r\n          <div className=\"meta\">\r\n            <code>Code</code>\r\n          </div>\r\n          <div className=\"description\">\r\n            <p>{snip.code}</p>\r\n          </div>\r\n          <div className=\"extra\">\r\n            <Button \r\n              onClick={()=> selectSnip(snip.id)} \r\n              floated=\"right\" \r\n              content='View' \r\n              color='blue'/>\r\n            <Button \r\n              onClick={(e)=> deleteSnip(e, snip.id)} \r\n              floated=\"right\" \r\n              content='Delete' \r\n              color='red'\r\n              loading={target === snip.id && submitting}\r\n              name={snip.id}/>\r\n            <span>Category</span>\r\n          </div>\r\n          </div>\r\n        </div>)}\r\n      </div>\r\n    </Segment>\r\n    \r\n  \r\n)\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'semantic-ui-react'\r\nimport { ISnip } from '../../app/models/snip'\r\nimport css from '../../resources/Images/css.png'\r\nimport js from '../../resources/Images/js.png'\r\nimport html from '../../resources/Images/html.png'\r\nimport c from '../../resources/Images/c.png'\r\n\r\n//let lang = js\r\n\r\ninterface IProps{\r\n  snip : ISnip;\r\n  setEditMode: (editMode: boolean) => void;\r\n  setSelectedSnip: (snip: ISnip | null)=> void;\r\n}\r\n\r\nconst addImage = (snipLang: string) =>{\r\n  if(snipLang.toLowerCase() === 'javascript'){\r\n    return js\r\n  }\r\n  if(snipLang.toLowerCase() === 'c#'){\r\n    return c\r\n  }\r\n  if(snipLang.toLowerCase() === 'html'){\r\n    return html\r\n  }\r\n  if(snipLang.toLowerCase() === 'css'){\r\n    return css\r\n  }\r\n}\r\n\r\nexport const SnipsDetails: React.FC<IProps> = ({snip, setEditMode, setSelectedSnip}) => {\r\n  return (\r\n    <div className=\"ui card fluid\">\r\n      <div className=\"image\">\r\n        <img src={addImage(snip.language)} alt='code language'/>\r\n      </div>\r\n      <div className=\"content\">\r\n        <a className=\"header\" href=\"#top\">{snip.title}</a>\r\n        <div className=\"meta\">\r\n          <span className=\"description\">{snip.language}</span>\r\n        </div>\r\n        <div className=\"meta\">\r\n          <span className=\"description\">{snip.description}</span>\r\n        </div>\r\n        <div className=\"meta\">\r\n          <span className=\"description\">{snip.category}</span>\r\n        </div>\r\n        <h6 className= \"ui icon header\">\r\n          <i className=\"code icon\"></i>\r\n          Code\r\n        </h6>\r\n        <pre className = \"prettyprint\">{snip.code}</pre>\r\n      </div>\r\n      <div className=\"extra content\">\r\n        <Button.Group widths={2}>\r\n          <Button onClick={() =>setEditMode(true)} basic color=\"blue\" content=\"Edit\"></Button>\r\n          <Button onClick ={()=> setSelectedSnip(null)} basic color=\"grey\" content=\"Cancel\"></Button>\r\n        </Button.Group>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useState,} from 'react'\r\nimport { Segment, Form, Button } from 'semantic-ui-react'\r\nimport { ISnip } from '../../app/models/snip'\r\n// import css from '../../resources/Images/css.png'\r\n// import js from '../../resources/Images/js.png'\r\n// import html from '../../resources/Images/html.png'\r\n// import c from '../../resources/Images/c.png'\r\nimport {v4 as uuid} from 'uuid';\r\n\r\ninterface IProps{\r\n  setEditMode: (editMode:boolean) => void;\r\n  snip: ISnip;\r\n  createSnip: (snip:ISnip) => void;\r\n  editSnip:  (snip: ISnip) =>void;\r\n  submitting: boolean;\r\n}\r\n\r\n// const dropOptions = [\r\n//   {\r\n//     key:'C#',\r\n//     text: 'C#',\r\n//     value: 'C#',\r\n//     image: {avatar: true, src:c}\r\n//   },\r\n//   {\r\n//     key:'CSS',\r\n//     text: 'CSS',\r\n//     value: 'CSS',\r\n//     image: {avatar: true, src:css}\r\n//   },\r\n//   {\r\n//     key:'HTML',\r\n//     text: 'HTML',\r\n//     value: 'HTML',\r\n//     image: {avatar: true, src:html}\r\n//   },\r\n//   {\r\n//     key:'JavaScript',\r\n//     text: 'JavaScript',\r\n//     value: 'JavaScript',\r\n//     image: {avatar: true, src:js}\r\n//   },\r\n// ]\r\n\r\n\r\n// TODO add logic to pretify code later\r\nexport const SnipForm: React.FC<IProps> = ({setEditMode, snip: initialFormState, createSnip, editSnip, submitting}) => {\r\n  \r\n  const initializeForm = () =>{\r\n    if (initialFormState){\r\n      return initialFormState;\r\n    } else {\r\n      return {\r\n        id:'',\r\n        title: '',\r\n        description: '',\r\n        category: '',\r\n        language: '',\r\n        code:''\r\n      }\r\n    }\r\n  }\r\n\r\n  const [snip, setSnip] = useState<ISnip>(initializeForm)\r\n  \r\n  const handleInputChange = (event: any) => {\r\n    const {name, value} = event.currentTarget\r\n    setSnip({...snip, [name]: value})\r\n  }\r\n\r\n const handleSubmit = () => {\r\n   //console.log(snip)\r\n   if(snip.id.length === 0){\r\n     let newSnip = {\r\n       ...snip,\r\n       id: uuid()\r\n     }\r\n     createSnip(newSnip)\r\n   } else {\r\n     editSnip(snip);\r\n   }\r\n }\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <Segment clearing>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Input \r\n            onChange={handleInputChange} \r\n            name='title' \r\n            placeholder=\"Title\" \r\n            value={snip.title}\r\n          />\r\n\r\n          <Form.Input \r\n          onChange={handleInputChange} \r\n          name='language' \r\n          placeholder=\"Language\" \r\n          value={snip.language}/>\r\n\r\n          {/* <Dropdown\r\n            onSelect = {handleInputChange}\r\n            placeholder = \"Language\"\r\n            fluid\r\n            selection\r\n            options={dropOptions}\r\n            name='language'\r\n            value = {snip.language}\r\n            \r\n          /><br/> */}\r\n\r\n          <Form.TextArea \r\n            rows={2} \r\n            onChange={handleInputChange} \r\n            name='description'\r\n            placeholder=\"Description\"\r\n            value={snip.description}\r\n          />\r\n\r\n          <Form.Input\r\n            onChange={handleInputChange} \r\n            name='category'  \r\n            placeholder=\"Category\" \r\n            value={snip.category}\r\n          />\r\n\r\n          <Form.TextArea \r\n            onChange={handleInputChange} \r\n            name='code'\r\n            placeholder=\"Code\" \r\n            value={snip.code}\r\n          />\r\n          \r\n          <Button loading={submitting} floated='right' positive type='submit' content='Submit'/>\r\n          <Button onClick={( () => setEditMode(false))} floated='right' type='button' content='Cancel' color='grey'/>\r\n\r\n        </Form>\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React, { SyntheticEvent } from 'react'\r\nimport { List } from 'semantic-ui-react'\r\nimport { ISnip } from '../../../app/models/snip'\r\nimport { SnipList } from './SnipList'\r\nimport { SnipsDetails } from '../../details/SnipsDetails'\r\nimport { SnipForm } from '../../form/SnipForm'\r\n\r\ninterface IProps{\r\n  snips:ISnip[];\r\n  selectSnip: (id:string) => void;\r\n  selectedSnip: ISnip | null;\r\n  editMode: boolean;\r\n  setEditMode: (editMode: boolean) => void;\r\n  setSelectedSnip: (snip: ISnip | null) => void;\r\n  createSnip: (snip:ISnip) => void;\r\n  editSnip:  (snip: ISnip) =>void;\r\n  deleteSnip: (e:SyntheticEvent<HTMLButtonElement>, id: string) => void;\r\n  submitting: boolean;\r\n  target: string;\r\n}\r\n\r\nexport const SnipsDashboard: React.FC<IProps> = ({\r\n  snips, \r\n  selectSnip, \r\n  selectedSnip, \r\n  editMode, \r\n  setEditMode, \r\n  setSelectedSnip,\r\n  editSnip,\r\n  createSnip,\r\n  deleteSnip,\r\n  submitting,\r\n  target\r\n}) => {\r\n  return (\r\n    \r\n    <div className=\"ui grid\">\r\n      <div className=\"eight wide column\">\r\n        <List>\r\n            <SnipList \r\n              snips = {snips} \r\n              selectSnip = {selectSnip}\r\n              deleteSnip = {deleteSnip}\r\n              submitting = {submitting}\r\n              target = {target}/>\r\n        </List>\r\n      </div>\r\n      <div className= \"eight wide column\">\r\n        {selectedSnip && !editMode &&(\r\n          <SnipsDetails \r\n            snip ={selectedSnip} \r\n            setEditMode={setEditMode}\r\n            setSelectedSnip={setSelectedSnip}\r\n          />\r\n        )}\r\n        {editMode && (\r\n          <SnipForm\r\n            key={(selectedSnip && selectedSnip.id) || 0} \r\n            setEditMode={setEditMode} \r\n            snip={selectedSnip!} \r\n            createSnip = {createSnip}\r\n            editSnip = {editSnip}\r\n            submitting = {submitting}\r\n            />\r\n          )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import axios, { AxiosResponse } from 'axios';\r\nimport { ISnip } from '../models/snip';\r\n\r\n/*\r\n\r\nThis is an agent that will house all of the methods to make calls to the API using AXIOS\r\nThe default base url has been set to the api locally. \r\nThe response body is pulled out and stored in a variable responseBody. \r\nThe request object holds the methods that will make the\r\ncalls to the api. The returned object is \r\n\r\n*/\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst request = {\r\n  get: (url: string) => axios.get(url).then(responseBody),\r\n  post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n  put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n  del: (url: string) => axios.delete(url).then(responseBody)\r\n}\r\n\r\n// const sleep = (ms: number) => (response: AxiosResponse) =>\r\n//   new Promise<AxiosResponse>(resolve=>setTimeout(()=> resolve(response), ms))\r\n\r\n\r\nconst Snips = {\r\n  list: ():Promise<ISnip[]> => request.get('/snips'),\r\n  details: (id: string) => request.get(`/snips/${id}`),\r\n  create: (snip: ISnip) => request.post(`/snips`, snip),\r\n  update: (snip: ISnip) => request.put(`/snips/${snip.id}`, snip),\r\n  delete: (id: string) => request.del(`/snips/${id}`)\r\n}\r\n\r\nexport default {\r\n  Snips\r\n}","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\n\r\nexport const Loading: React.FC<{content?: string}> = ({\r\n  content\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Dimmer active inverted>\r\n        <Loader size='huge' content={content}/>\r\n      </Dimmer>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect, SyntheticEvent } from 'react';\r\nimport './styles.css';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { ISnip } from '../models/snip';\r\nimport { NavBar } from '../../features/nav/NavBar';\r\nimport { SnipsDashboard } from '../../features/snips/dashboard/SnipsDashboard';\r\nimport agent from '../api/agent';\r\nimport { Loading } from './Loading';\r\n\r\n\r\n\r\n/*\r\nWhen using typescript you can pass down not only the state but the component properties and its types into class components\r\nand that is what we are doing here. We are passing down not the properties but only the state. The stat is \r\nan interface that holds the snips. The snips properties have been defined in the snip.ts file. Now we can use\r\nstrongly typed language AND javascript. We make the state read only as we are not writing to the API at this point\r\njust getting information out. In the class component we are passing in an empty object for the components(not the snip object)\r\nproperties. We are also passing in the type of object held in state which is the snip object defined in the models folder\r\n\r\nNow we can use intellisense to access the different properties defined in our ISnips interface.\r\n\r\nNow we get rid of class components completely to instead use react hooks. Hooks allow us to use state, and lifecycle\r\nmethods without creating a class(or rather using just a functional component). In order to do this we need\r\nto get rid of they typical class component methods and use hooks. we get rid of setState for useState\r\nwe need to import useState from react (we no longer need components from the module). We also change the component itself \r\ninto an function by creating it using const instead of extending the class component. We also cn define the\r\nuse state with the type ISnip and an empty array as this is what will house the info from the API call.\r\n\r\n\r\n*/\r\n\r\n\r\nconst App = () => {\r\n  \r\n  const [snips, setSnips] = useState<ISnip[]>([])\r\n\r\n  const [selectedSnip, setSelectedSnip] = useState<ISnip|null>(null);\r\n\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const [submitting, setSubmitting] = useState(false)\r\n\r\n  const [target, setTarget] = useState('');\r\n  \r\n  const handleSelectedSnip = (id: string) => {\r\n    setSelectedSnip(snips.filter(s => s.id === id)[0])\r\n    setEditMode(false);\r\n  }\r\n\r\n  const handleOpenCreateForm = () => {\r\n    setSelectedSnip(null);\r\n    setEditMode(true);\r\n  }\r\n\r\n  const handleCreateSnip = (snip: ISnip) =>{\r\n    setSubmitting(true);\r\n    agent.Snips.create(snip).then(()=>{\r\n      setSnips([...snips, snip])\r\n      setSelectedSnip(snip);\r\n      setEditMode(false);\r\n    }).then( ()=>setSubmitting(false) )\r\n  }\r\n\r\n  const handleEditSnip = (snip: ISnip) =>{\r\n    setSubmitting(true);\r\n    agent.Snips.update(snip).then(() =>{\r\n      setSnips([...snips.filter(s => s.id ! !==snip.id), snip])\r\n      setSelectedSnip(snip);\r\n      setEditMode(false)\r\n    }).then(()=>setSubmitting(false))\r\n  }\r\n\r\n  const handleDeleteSnip = (event: SyntheticEvent<HTMLButtonElement>, id: string) =>{\r\n    setSubmitting(true);\r\n    setTarget(event.currentTarget.name)\r\n    agent.Snips.delete(id).then(()=>{\r\n      setSnips([...snips.filter(s =>s.id !==id)])\r\n    }).then(()=>setSubmitting(false))\r\n    \r\n  }\r\n\r\nconst [editMode, setEditMode] = useState(false);\r\n\r\n  //use effect is three lifecyle components rolled into one. It runs componentDidMount, componentDidUpdate, and componentWillUnmount\r\n  useEffect( () => {\r\n  agent.Snips.list()\r\n      .then(response=>{\r\n        setSnips(response)\r\n      }).then( () =>\r\n          setLoading(false));\r\n    }, [] //this empty array ensures that we don't call the useState every time the screen rerenderes evrytime to component render\r\n  );\r\n\r\n  if(loading) return<Loading content='Loading Snips...'/>\r\n  //this is where the jsx begins\r\n \r\n  return (\r\n    <div>\r\n      <NavBar openCreateForm = {handleOpenCreateForm}/>\r\n      <div className=\"snipListContainer\">\r\n      <Container className=\"snipListContainer\">\r\n        <SnipsDashboard \r\n          snips = {snips}\r\n          selectSnip = {handleSelectedSnip}\r\n          selectedSnip={selectedSnip}\r\n          editMode = {editMode}  \r\n          setEditMode = {setEditMode}\r\n          setSelectedSnip = {setSelectedSnip}\r\n          createSnip = {handleCreateSnip}\r\n          editSnip = {handleEditSnip}\r\n          deleteSnip = {handleDeleteSnip}\r\n          submitting = {submitting}\r\n          target={target}\r\n        />\r\n      </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}